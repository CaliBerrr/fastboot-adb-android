diff --git a/adb/adb_utils.cpp b/adb/adb_utils.cpp
index 0645122b7..b8354871b 100644
--- a/adb/adb_utils.cpp
+++ b/adb/adb_utils.cpp
@@ -259,7 +259,12 @@ std::string adb_get_homedir_path(bool check_env_first) {
     }
     return home_str;
 #else
+#if defined(ADB_HOST)
+    if (const char* const home = getenv("HOMEDIR")) {
+        if (home == nullptr) return getenv("ANDROID_DATA");
+#else
     if (const char* const home = getenv("HOME")) {
+#endif
         return home;
     }
     return {};
diff --git a/adb/client/main.cpp b/adb/client/main.cpp
index ba4737f8d..ee436b30b 100644
--- a/adb/client/main.cpp
+++ b/adb/client/main.cpp
@@ -55,8 +55,13 @@ static std::string GetLogFilePath() {
 
     return temp_path_utf8 + log_name;
 #else
+#if defined(ADB_HOST)
+    const char* tmp_dir = getenv("HOMEDIR");
+    if (tmp_dir == nullptr) tmp_dir = "/data/local/tmp";
+#else
     const char* tmp_dir = getenv("TMPDIR");
     if (tmp_dir == nullptr) tmp_dir = "/tmp";
+#endif
     return android::base::StringPrintf("%s/adb.%u.log", tmp_dir, getuid());
 #endif
 }
diff --git a/adb/diagnose_usb.cpp b/adb/diagnose_usb.cpp
index 0f067b0ec..958b46994 100644
--- a/adb/diagnose_usb.cpp
+++ b/adb/diagnose_usb.cpp
@@ -32,7 +32,7 @@ static const char kPermissionsHelpUrl[] = "http://developer.android.com/tools/de
 // Returns a message describing any potential problems we find with udev, or nullptr if we can't
 // find plugdev information (i.e. udev is not installed).
 static const char* GetUdevProblem() {
-#if defined(__linux__)
+#if defined(__linux__) && !defined(ADB_HOST)
     errno = 0;
     group* plugdev_group = getgrnam("plugdev");
 
diff --git a/adb/sockets.cpp b/adb/sockets.cpp
index 63b7df6f2..8ce18a653 100644
--- a/adb/sockets.cpp
+++ b/adb/sockets.cpp
@@ -614,7 +614,7 @@ char* skip_host_serial(const char* service) {
 
     for (const std::string& prefix : prefixes) {
         if (!strncmp(service, prefix.c_str(), prefix.length())) {
-            return strchr(service + prefix.length(), ':');
+            return strchr((char *)(service + prefix.length()), ':');
         }
     }
 
@@ -623,7 +623,7 @@ char* skip_host_serial(const char* service) {
         service += 4;
     }
 
-    char* first_colon = strchr(service, ':');
+    char* first_colon = strchr((char *)service, ':');
     if (!first_colon) {
         // No colon in service string.
         return nullptr;
diff --git a/base/logging.cpp b/base/logging.cpp
index 174187149..98b1f3b7e 100644
--- a/base/logging.cpp
+++ b/base/logging.cpp
@@ -46,7 +46,11 @@
 
 // Headers for LogMessage::LogLine.
 #ifdef __ANDROID__
+#if defined(ANDROID_HOST_BUILD)
+extern "C" void android_set_abort_message(const char *msg);
+#else
 #include <android/set_abort_message.h>
+#endif
 #include "cutils/log.h"
 #else
 #include <sys/types.h>
@@ -162,7 +166,7 @@ namespace base {
 
 static auto& logging_lock = *new mutex();
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD)
 static auto& gLogger = *new LogFunction(LogdLogger());
 #else
 static auto& gLogger = *new LogFunction(StderrLogger);
@@ -195,7 +199,7 @@ void StderrLogger(LogId, LogSeverity severity, const char*, const char* file,
 }
 
 
-#ifdef __ANDROID__
+#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD)
 LogdLogger::LogdLogger(LogId default_log_id) : default_log_id_(default_log_id) {
 }
 
diff --git a/fastboot/protocol.cpp b/fastboot/protocol.cpp
index 4850b4a0d..6bfdce625 100644
--- a/fastboot/protocol.cpp
+++ b/fastboot/protocol.cpp
@@ -27,7 +27,7 @@
  */
 
 #define round_down(a, b) \
-    ({ typeof(a) _a = (a); typeof(b) _b = (b); _a - (_a % _b); })
+    ({ __typeof__(a) _a = (a); __typeof__(b) _b = (b); _a - (_a % _b); })
 
 #include <stdio.h>
 #include <stdlib.h>
diff --git a/liblog/fake_log_device.c b/liblog/fake_log_device.c
index cc67f3eba..dbcb0cb83 100644
--- a/liblog/fake_log_device.c
+++ b/liblog/fake_log_device.c
@@ -670,7 +670,7 @@ static void setRedirects()
         /* We're running inside wrapsim, so we can just write to the device. */
         redirectOpen = (int (*)(const char *pathName, int flags))open;
         redirectClose = close;
-        redirectWritev = writev;
+        redirectWritev = (ssize_t(*)(int, const struct iovec *, int))writev;
     } else {
         /* There's no device to delegate to; handle the logging ourselves. */
         redirectOpen = logOpen;
diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index c7b5a8415..e2c56f120 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -21,8 +21,12 @@
 #include <sys/time.h>
 
 #ifdef __BIONIC__
+#if defined(FAKE_LOG_DEVICE)
+extern void android_set_abort_message(const char *msg);
+#else
 #include <android/set_abort_message.h>
 #endif
+#endif
 
 #include <log/event_tag_map.h>
 #include <log/logd.h>
@@ -235,7 +239,7 @@ static int __write_to_log_daemon(log_id_t log_id, struct iovec *vec, size_t nr)
         return -EINVAL;
     }
 
-#if defined(__BIONIC__)
+#if defined(__BIONIC__) && !defined(FAKE_LOG_DEVICE)
     if (log_id == LOG_ID_SECURITY) {
         if (vec[0].iov_len < 4) {
             return -EINVAL;
diff --git a/libziparchive/zip_archive.cc b/libziparchive/zip_archive.cc
index 986ee7208..aa579fc54 100644
--- a/libziparchive/zip_archive.cc
+++ b/libziparchive/zip_archive.cc
@@ -272,7 +272,7 @@ static int32_t MapCentralDirectory0(int fd, const char* debug_file_name,
   if (static_cast<off64_t>(eocd->cd_start_offset) + eocd->cd_size > eocd_offset) {
     ALOGW("Zip: bad offsets (dir %" PRIu32 ", size %" PRIu32 ", eocd %" PRId64 ")",
         eocd->cd_start_offset, eocd->cd_size, static_cast<int64_t>(eocd_offset));
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) && !defined(ANDROID_HOST_BUILD)
     if (eocd->cd_start_offset + eocd->cd_size <= eocd_offset) {
       android_errorWriteLog(0x534e4554, "31251826");
     }
