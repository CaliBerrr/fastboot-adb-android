diff --git a/adb/adb_utils.cpp b/adb/adb_utils.cpp
index 0645122b7..35e0f4bc5 100644
--- a/adb/adb_utils.cpp
+++ b/adb/adb_utils.cpp
@@ -259,7 +259,7 @@ std::string adb_get_homedir_path(bool check_env_first) {
     }
     return home_str;
 #else
-    if (const char* const home = getenv("HOME")) {
+    if (const char* const home = getenv("ANDROID_DATA")) {
         return home;
     }
     return {};
diff --git a/adb/diagnose_usb.cpp b/adb/diagnose_usb.cpp
index 0f067b0ec..1138f8df0 100644
--- a/adb/diagnose_usb.cpp
+++ b/adb/diagnose_usb.cpp
@@ -32,28 +32,7 @@ static const char kPermissionsHelpUrl[] = "http://developer.android.com/tools/de
 // Returns a message describing any potential problems we find with udev, or nullptr if we can't
 // find plugdev information (i.e. udev is not installed).
 static const char* GetUdevProblem() {
-#if defined(__linux__)
-    errno = 0;
-    group* plugdev_group = getgrnam("plugdev");
-
-    if (plugdev_group == nullptr) {
-        if (errno != 0) {
-            perror("failed to read plugdev group info");
-        }
-        // We can't give any generally useful advice here, just let the caller print the help URL.
-        return nullptr;
-    }
-
-    // getgroups(2) indicates that the group_member() may not check the egid so we check it
-    // additionally just to be sure.
-    if (group_member(plugdev_group->gr_gid) || getegid() == plugdev_group->gr_gid) {
-        // The user is in plugdev so the problem is likely with the udev rules.
-        return "verify udev rules";
-    }
-    return "udev requires plugdev group membership";
-#else
     return nullptr;
-#endif
 }
 
 // Short help text must be a single line, and will look something like:
diff --git a/adb/sockets.cpp b/adb/sockets.cpp
index 63b7df6f2..8ce18a653 100644
--- a/adb/sockets.cpp
+++ b/adb/sockets.cpp
@@ -614,7 +614,7 @@ char* skip_host_serial(const char* service) {
 
     for (const std::string& prefix : prefixes) {
         if (!strncmp(service, prefix.c_str(), prefix.length())) {
-            return strchr(service + prefix.length(), ':');
+            return strchr((char *)(service + prefix.length()), ':');
         }
     }
 
@@ -623,7 +623,7 @@ char* skip_host_serial(const char* service) {
         service += 4;
     }
 
-    char* first_colon = strchr(service, ':');
+    char* first_colon = strchr((char *)service, ':');
     if (!first_colon) {
         // No colon in service string.
         return nullptr;
diff --git a/base/logging.cpp b/base/logging.cpp
index 174187149..bd029460d 100644
--- a/base/logging.cpp
+++ b/base/logging.cpp
@@ -46,7 +46,7 @@
 
 // Headers for LogMessage::LogLine.
 #ifdef __ANDROID__
-#include <android/set_abort_message.h>
+extern "C" void android_set_abort_message(const char *msg);
 #include "cutils/log.h"
 #else
 #include <sys/types.h>
@@ -223,12 +223,14 @@ void LogdLogger::operator()(LogId id, LogSeverity severity, const char* tag,
 
   log_id lg_id = kLogIdToAndroidLogId[id];
 
+#if 0
   if (priority == ANDROID_LOG_FATAL) {
     __android_log_buf_print(lg_id, priority, tag, "%s:%u] %s", file, line,
                             message);
   } else {
     __android_log_buf_print(lg_id, priority, tag, "%s", message);
   }
+#endif
 }
 #endif
 
diff --git a/fastboot/protocol.cpp b/fastboot/protocol.cpp
index 4850b4a0d..6bfdce625 100644
--- a/fastboot/protocol.cpp
+++ b/fastboot/protocol.cpp
@@ -27,7 +27,7 @@
  */
 
 #define round_down(a, b) \
-    ({ typeof(a) _a = (a); typeof(b) _b = (b); _a - (_a % _b); })
+    ({ __typeof__(a) _a = (a); __typeof__(b) _b = (b); _a - (_a % _b); })
 
 #include <stdio.h>
 #include <stdlib.h>
diff --git a/libziparchive/zip_archive.cc b/libziparchive/zip_archive.cc
index 986ee7208..0b595cdb1 100644
--- a/libziparchive/zip_archive.cc
+++ b/libziparchive/zip_archive.cc
@@ -272,11 +272,6 @@ static int32_t MapCentralDirectory0(int fd, const char* debug_file_name,
   if (static_cast<off64_t>(eocd->cd_start_offset) + eocd->cd_size > eocd_offset) {
     ALOGW("Zip: bad offsets (dir %" PRIu32 ", size %" PRIu32 ", eocd %" PRId64 ")",
         eocd->cd_start_offset, eocd->cd_size, static_cast<int64_t>(eocd_offset));
-#if defined(__ANDROID__)
-    if (eocd->cd_start_offset + eocd->cd_size <= eocd_offset) {
-      android_errorWriteLog(0x534e4554, "31251826");
-    }
-#endif
     return kInvalidOffset;
   }
   if (eocd->num_records == 0) {
